# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Creates Signs and Pushes a NuGet from a Nuspec file called template.nuspec located in the root of workspace"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3
      - uses: nuget/setup-nuget@v1
        with:
          nuget-api-key: ${{ secrets.NuGetAPIKey }}
          nuget-version: '6.x'
          
      - name: Create NuGet Package
        run: |
         dotnet pack ./working
         
      #- name: Find created nuget
       # id: findcreatednuget        
        #run: |
         #   cd ./working/bin/Debug/
          #  $myvar = dir *.nupkg /b
           # echo ::set-output name=nugetPackageName::$($myvar)
        #shell: cmd
        
      - name: Find created nuget
        id: findcreatednuget        
        run: |
          cd ./working/bin/Debug/
          echo nugetPackageName=$(dir *.nupkg) >> $GITHUB_OUTPUT
        shell: bash
        
        
      - name: Echo Found Package
        id: echoFoundPackage
        run: echo "${{ steps.findcreatednuget.outputs.nugetPackageName }}"
        shell: cmd
        
      - name: Download Encrypted Signature File
        id: downloadSignatureFile
        env:
          CERTIFICATE_BASE64: ${{  secrets.SKYLINEPFX }}
        run: |
          echo $CERTIFICATE_BASE64 > encodedSignatureFile
        shell: cmd
        
      - name: Decrypt Signature File
        id: decryptSignatureFile
        run: |
          certutil -decode encodedSignatureFile Skyline.pfx
        shell: cmd
        
      - name: Sign NuGet Package
        run: |
         nuget sign "${{ steps.findcreatednuget.outputs.nugetPackageName }}" -NonInteractive -CertificatePath "Skyline.pfx" -Timestamper "http://timestamp.comodoca.com/rfc3161" -CertificatePassword ${{ secrets.SKYLINEPFXPASSWORD }}
